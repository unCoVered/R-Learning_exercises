my.data <- data.exercise.3.1
set.seed(1786)
data.exercise.3.1 <- exp(matrix(rnorm(2000),nrow=100))
index1.temp <- sample(1:100,10)
index2.temp <- sample(1:20,10)
for (i in 1:10) {
data.exercise.3.1[index1.temp[i], index2.temp[i]] <-- 1
}
count.negatives <- 0
for (j in my.data[, 1]) {
negative <- (min(my.data[j, ]) < 0)
count.negatives <- count.negatives + negative
if (count.negatives <= 3) {
if (!negative) {
cat("The mean of row ", j, " is ", mean(my.data[j, ]), "\n")
} else {
cat("<Row ", i, " contains negative values> \n")
}
} else {
cat("Too many negative values \n")
break
}
}
my.data <- data.exercise.3.1
count.negatives <- 0
for (j in my.data[, 1]) {
negative <- (min(my.data[j, ]) < 0)
count.negatives <- count.negatives + negative
if (count.negatives <= 3) {
if (!negative) {
cat("The mean of row ", j, " is ", mean(my.data[j, ]), "\n")
} else {
cat("<Row ", i, " contains negative values> \n")
}
} else {
cat("Too many negative values \n")
break
}
}
count.negatives <- 0
for (j in my.data[, 1]) {
negative <- (min(my.data[j, ]) < 0)
count.negatives <- count.negatives + negative
if (count.negatives <= 3) {
if (!negative) {
cat("The mean of row", j, "is", mean(my.data[j, ]), "\n")
} else {
cat("<Row", j, "contains negative values> \n")
}
} else {
cat("Too many negative values \n")
break
}
}
k<-10
y<-matrix(rnorm(k^2),nrow=k)
z<-0*y
#loop:
time1<-as.numeric(Sys.time())
for(i in 1:k){
#loop:
for(j in 1:k){
z[i,j]<-y[i,j]^2
}
}
time2<-as.numeric(Sys.time())
# using object form in R:
time3<-as.numeric(Sys.time())
# using object form in R:
z<-y^2
time4<-as.numeric(Sys.time())
# run time increase factor:
(time2-time1)/(time4-time3)
r<-1
k<-my.dimensions[r]
y<-matrix(rnorm(k^2),nrow=k)
z<-0*y
time1<-as.numeric(Sys.time())
#loop:
for(i in 1:k){
for(j in 1:k){
z[i,j]<-y[i,j]^2
}
}
time2<-as.numeric(Sys.time())
time3<-as.numeric(Sys.time())
# using object form in R:z<-y^2
time4<-as.numeric(Sys.time())
# run time increase factor:
my.runtime.factors[r]<-(time2-time1)/(time4-time3)
source('~/repositories_per/r/r-scripts/r-course-3.R', echo=TRUE)
k1<-10
k2<-100000
my.data<-as.data.frame(matrix(rnorm(k1*k2),nrow=k1))
mean1<-numeric(k2)
mean2<-numeric(k2)
time1<-as.numeric(Sys.time())
for(i in 1:k2){
mean1[i]<-mean(my.data[,i])
}
time2<-as.numeric(Sys.time())
time3<-as.numeric(Sys.time())
mean2<-sapply(my.data,mean)
time4<-as.numeric(Sys.time())
(time2-time1)/(time4-time3)
k1<-10
k2<-100000
my.data<-as.data.frame(matrix(rnorm(k1*k2),nrow=k1))
mean1<-numeric(k2)
mean2<-numeric(k2)
time1<-as.numeric(Sys.time())
for(i in 1:k2){
mean1[i]<-mean(my.data[,i])
}
time2<-as.numeric(Sys.time())
time3<-as.numeric(Sys.time())
mean2<-sapply(my.data,mean)
time4<-as.numeric(Sys.time())
(time2-time1)/(time4-time3)
notfound<-TRUE
i<-0
while(notfound) {
if(i%%2!=0) {
cat(i)
notfound<-FALSE
}
}
k1<-100
k2<-10000
my.data<-as.data.frame(matrix(rnorm(k1*k2),nrow=k1))
my.summary<-matrix(nrow=4,ncol=k)
k<-1000
r<-100
my.data<-as.data.frame(matrix(rnorm(K*r),nrow=kr))
my.summary<-matrix(nrow=4,ncol=k)
k<-1000
r<-100
my.data<-as.data.frame(matrix(rnorm(k*r),nrow=kr))
my.summary<-matrix(nrow=4,ncol=k)
k<-1000
r<-100
my.data<-as.data.frame(matrix(rnorm(k*r),nrow=r))
my.summary<-matrix(nrow=4,ncol=k)
k<-1000
r<-100
x<-as.data.frame(matrix(rnorm(k*r),nrow=r))
my.summary<-matrix(nrow=4,ncol=k)
for(i in 1:k) {
my.summary[1,i] <- min(x[, i])
my.summary[2,i] <- median(x[, i])
my.summary[3,i] <- mean(x[, i])
my.summary[4,i] <- max(x[, i])
}
sapply(x, my.function)
my.function<-function(x){
return(c(min(x),median(x),mean(x),max(x)))
}
sapply(x, my.function)
matrix(1:6,nrow=3,ncol=3)
x<-matrix(1:12,4)
x[cbind(c(1,3,2),c(3,3,2))]      #first selection
x[cbind(c(1,3,2),c(3,3,2))]      #first selection
x[c(1,3,2),c(3,3,2)]             #second selection
row<-matrix(rep(1:100,100),nrow=100)
column<-matrix(rep(1:100,100),nrow=100,byrow=T)
A<-3*column^3/(1+row*column)
sum(A)
sum(A[row<=column])
x<-1:3
y<-seq(4,8)
z<-rep(9:10,1)
xyz<-c(x,y,z)
x<-matrix(-4:5,nrow=2)
x
x<-matrix(-4:5,nrow=2)
x
set.seed(9852)
my.data<-list()
for(i in 1:100){
my.data[[i]]<-matrix(rnorm(16),nrow=4)
}
set.seed(9852)
my.data<-list()
for(i in 1:100){
my.data[[i]]<-matrix(rnorm(16),nrow=4)
}
my.index <- (my.data[[i]] < 0)
my.index<-list()
for(i in 1:100){
my.index <- (my.data[[i]] < 0)
}
my.index
my.negatives<-matrix(rep(0,16),nrow=4)
for(i in 1:100){
my.negatives<-my.negatives+my.index[[i]]
}
my.negatives
my.negatives<-matrix(rep(0,16),nrow=4)
for(i in 1:100){
my.negatives<-my.negatives+my.index[[i]]
}
my.negatives
sum(my.negatives)
my.index<-list()
for(i in 1:100){
my.index <- (my.data[[i]] < 0)
}
my.negatives<-matrix(rep(0,16),nrow=4)
for(i in 1:100){
my.negatives<-my.negatives+my.index[[i]]
}
my.negatives
my.index<-list()
for(i in 1:100){
my.index[[i]]<-(my.data[[i]]<0)
}
my.negatives<-matrix(rep(0,16),nrow=4)
for(i in 1:100){
my.negatives<-my.negatives+my.index[[i]]
}
my.negatives
sum(my.negatives)
sum(my.negatives)
my.negative.values<-numeric(0)
for(i in 1:100){
my.negative.values<-c(my.negative.values,my.data[i][my.index[i]])
}
my.negative.values
my.negative.values<-numeric(0)
for(i in 1:100){
my.negative.values<-c(my.negative.values,my.data[[i]][my.index[i]])
}
my.negative.values
for(i in 1:100){
my.negative.values<-c(my.negative.values,my.data[[i]][my.index[[i]]])
}
my.negative.values<-numeric(0)
for(i in 1:100){
my.negative.values<-c(my.negative.values,my.data[[i]][my.index[[i]]])
}
my.negative.values
sum(my.negative.values)
quarters(my.negative.values, 1)
quantile(my.negative.values)
library(RODBC)
install.packages("RODBC")
library(RODBC)
install.packages("RODBC")
library(RODBC)
install.packages("RODBC")
install.packages("RODBC")
install.packages("RODBC")
library(RODBC)
connStr <- paste(
"Server=msedxeus.database.windows.net",
"Database=DAT209x01",
"uid=RLogin",
"pwd=P@ssw0rd",
"Driver={SQL Server}",
sep=";"
)
conn <- odbcDriverConnect(connStr)
connStr <- paste(
"Server=msedxeus.database.windows.net",
"Database=DAT209x01",
"uid=RLogin",
"pwd=P@ssw0rd",
"driver={SQL Server}",
sep=";"
)
conn <- odbcDriverConnect(connStr)
connStr <- paste(
"driver={SQL Server}",
"server=msedxeus.database.windows.net",
"database=DAT209x01",
"uid=RLogin",
"pwd=P@ssw0rd",
sep=";"
)
conn <- odbcDriverConnect(connStr)
connStr <- paste(
"driver={SQL Server}",
"server=msedxeus.database.windows.net",
"database=DAT209x01",
"uid=RLogin",
"pwd=P@ssw0rd",
sep=";"
)
conn <- odbcDriverConnect(connStr)
conn <- odbcDriverConnect(connStr)
library(RODBC)
## Exercise 7.1
connStr <- paste(
"driver={SQL Server}",
"server=msedxeus.database.windows.net",
"database=DAT209x01",
"uid=RLogin",
"pwd=P@ssw0rd",
sep=";"
)
conn <- odbcDriverConnect(connStr)
sqlTables(conn, tableType = "TABLE")
sqlColumns(conn,"bi.sentiment")[c("COLUMN_NAME","TYPE_NAME")]
data.frame.x<-data.frame(names=c("Gretha","Robert","John","Heather"),
age=c(30,18,25,70),
nickname=c("Quicksilver","The Man","Nifty","Starlight"))
data.frame.y<-data.frame("Person_name"=c("William","Nancy","Charlotte","Henry"),
age=c(15,75,32,51),
"pet_dog"=c("King","Whity","Captain Vom","Doggie"))
data.frame.merge1 <- merge(data.frame.x, data.frame.y)
data.frame.merge1
data.frame.merge2 <- merge(data.frame.y, data.frame.x)
data.frame.merge2
data.frame.z<-merge(data.frame.y,data.frame.x,
by.x=c("Person_name","age"),
by.y=c("names","age"),all=TRUE)
data.frame.z
names(iris)
levels(iris$Species)
median(iris$Sepal.Length)
setosa.data<-subset(iris,
Species == "setosa" & Sepal.Length<median(Sepal.Length),
select = -Species)
summary(setosa.data)
my.text<-"Over the last decade, bluetongue virus have spread northwards from the mediterranean area. Initially this was ascribed to climate changes, but it has since been realized that a major contributing factor has been new transmitting vectors, culicoides obsoletus and culicoides pulicaris, which have the ability to aquire and transmit the disease. Recently, schmallenberg virus has emerged in northern europe, transmitted by biting midges as well."
my.lowercase<-c("bluetongue","culicoides","europe","mediterranean",
"northern","schmallenberg")
my.uppercase<-c("Bluetongue","Culicoides","Europe","Mediterranean",
"Northern","Schmallenberg")
my.new.text<-my.text
for(i in 1:length(my.lowercase)){
my.new.text<-gsub(my.lowercase[i],my.uppercase[i],my.new.text)
}
my.new.text
Set.seed(885)
my.posixct<-as.POSIXct(sample((60*60*24*365*50):(60*60*24*365*55),20),
origin = as.Date("1960-01-01"))
my.posixct2 <- my.posixct+9010
head(data.frame(my.posixct,my.posixct2))
Set.seed(885)
set.seed(885)
my.posixct<-as.POSIXct(sample((60*60*24*365*50):(60*60*24*365*55),20),
origin = as.Date("1960-01-01"))
my.posixct2 <- my.posixct+9010
head(data.frame(my.posixct,my.posixct2))
set.seed(449)
your.dates<-as.Date(sample(18000:20000,20), origin = "1960-01-01")
your.days<-c(julian(your.dates))
your.days
your.days<-c(julian(your.dates,origin="1960-01-01"))your.days
your.days<-c(julian(your.dates,origin="1960-01-01"))
your.days
your.days<-c(julian(your.dates,origin=as.Date("1960-01-01")))
your.days
set.seed(119)
my.days<-sample(18000:20000,20)
my.dates<-as.Date(my.days, origin = "1960-01-01")
my.date.info<-c(Weekday=weekdays(my.dates),my.days.structure)
install.packages("chron")
my.date.info<-c(Weekday=weekdays(my.dates),my.days.structure)
my.date.info<-rbind(Weekday=weekdays(my.dates),my.days.structure)
my.days.structure<-month.day.year(my.days,origin=c(1,1,1960))
my.days.structure<-month.day.year(my.days)
tapply(presidents,cycle(presidents),mean,na.rm=T)
tapply(presidents,cycle(presidents),mean,na.rm=T)
summary(airquality$Wind)
summary(airquality$Wind)
my.cut<-cut(airquality$Wind,breaks=2*(1:11)-1)
tapply(airquality$Solar.R,my.cut,mean,na.rm=TRUE)
summary(swiss)
my.cut2<-cut(swiss$Agriculture,breaks=10*(0:10))
my.cut3<-cut(swiss$Catholic,breaks=10*(0:10))
tapply(swiss$Fertility,list(my.cut2,my.cut3),mean)
colMeans(airquality)
tapply(airquality, mean)
lapply(airquality, mean)
sapply(airquality, mean)
tapply(chickwts$weight, chickwts$feed, mean)
aggregate(weight~feed, data=chickwts, mean)
by(chickwts$weight, chickwts$feed, mean)
sapply(chickwts, mean)
prop.table(with(airquality, table(Month, Temp > 80)),2)
prop.table(with(airquality, table(Temp > 80, Month)),1)
prop.table(with(airquality, table(Temp > 80, Month)),2)
prop.table(with(airquality, table(Month, Temp > 80)),1)
prop.table(with(airquality, table(Month, Temp > 80)),2)
prop.table(with(airquality, table(Temp > 80, Month)),1)
prop.table(with(airquality, table(Temp > 80, Month)),2)
prop.table(with(airquality, table(Month, Temp > 80)),1)
prop.table(with(airquality, table(Temp > 80, Month)),2)
lapply(airquality, mean)
sapply(airquality, mean)
as.list(sapply(airquality, mean))
my.data<-data.frame(Treatment=c(rep("A",4),rep("B",4)),
Stone=rep(rep(c("Small","Large"),c(2,2)),2),
Success=rep(c(1,0),4),
Count=c(81,6,192,71,234,36,55,25))
my.data
my.table<-xtabs(Treatment~Stone+Success+Count,data=my.data)
my.table<-xtabs(Stone~Treatment+Success+Count,data=my.data)
my.table<-xtabs(Count~Treatment+Success+Stone,data=my.data)
my.table
prop.table(margin.table(my.table, 1:2),2)
prop.table(margin.table(my.table, 1:2),1)
margin.table(prop.table(my.table, 1:2),2)
margin.table(prop.table(my.table, 1:2),1)
prop.table(margin.table(my.table, 1:2),1)
prop.table(my.table[,,1],1)
prop.table(my.table[,,1],2)
my.table
my.table[2]
my.table[,,2]
prop.table(my.table[,,2],2)
prop.table(my.table[,,2],1)
prop.table(my.table[,,1],1)
prop.table(my.table[2,,],2)
prop.table(my.table[2,,],1)
my.table
my.table[1,,]
my.table[2,,]
prop.table(my.table[1,,],1)
prop.table(my.table[1,,],2)
prop.table(margin.table(my.table, 1:3),1)
prop.table(margin.table(my.table, c(3,1)),1)
prop.table(margin.table(my.table, 1:3),1)
prop.table(margin.table(my.table, c(3,1)),1)
prop.table(margin.table(my.table, c(1,3)),2)
prop.table(margin.table(my.table, 3:1),2)
par(mfrow=c(3,3))
set.seed(779)
for(i in 1:9){
hist(rnorm(25), probability=TRUE,main=paste("Histogram",i))
curve(dnorm,add=TRUE,col="red",lwd=3)
}
doone <- function(x) {
x <- rbinom(1, 50, 1/6)
p <- x/50
p
}
p.sim <- replicate(1000, doone())
hist(p.sim, breaks = 15)
my.ozone<-airquality$Ozone[!is.na(airquality$Ozone) & airquality$Ozone>1]
mean.1<-mean(my.ozone)
sd.1<-sd(my.ozone)
mean.2<-mean(log(my.ozone))
sd.2<-sd(log(my.ozone))
length(my.ozone)
set.seed(55789)
simulated.1<-rnorm(115,mean=mean.1,sd=sd.1)
qqplot(simulated.1,my.ozone)
lines(0:200,0:200,type="l",lwd=3,col="red")
set.seed(8942)
simulated.2<-rnorm(115,mean=mean.2,sd=sd.2)
qqplot(exp(simulated.2),my.ozone)
lines(0:200,0:200,type="l",lwd=3,col="red")
doone <- function(){
x <- sum(sample(1:6,2,replace=TRUE))
y<-sum(sample(1:6,x,replace=TRUE))
y
}
set.seed(457778)
y.values<-replicate(1000,doone())
hist(y.values)
rnorm(3, mean=2, sd=1)
rnorm(3, mean=2, sd=1)
rnorm(3, mean=2, sd=1)
rnorm(3, mean=2, sd=1)
n<-1000
doone <- function(){
x<-rbinom(1,50,1/6)
p<-x/50
p
}
p.sim<-replicate(n,doone())
p.sim
p.sim
doone <- function(){
x<-rbinom(1,50,1/6)
p<-x/50
p
}
p.sim<-replicate(n,doone())
hist(p.sim,breaks=20)
p.sim<-replicate(10000,doone())
hist(p.sim,breaks=20)
p.sim<-replicate(100000,doone())
hist(p.sim,breaks=20)
p.sim<-replicate(100,doone())
hist(p.sim,breaks=20)
setwd("/home/alejandro/repositories_per/r/r-scripts/edx_course/resources")
my.data <- read.csv("data.lab10.csv")
my.data
data1<-my.data$systolic.bp[my.data$Genotype=="AA"]
data1<-my.data$systolic.bp[my.data$Genotype=="BA"]
data2<-my.data$systolic.bp[my.data$Genotype=="BB"]
data2<-my.data$systolic.bp[my.data$Genotype=="AB"]
data1<-my.data$systolic.bp[my.data$Genotype=="AA"]
data1
data1<-my.data$systolic.bp[my.data$Genotype=="BA"]
data1
data2<-my.data$systolic.bp[my.data$Genotype=="BB"]
data2
data2<-my.data$systolic.bp[my.data$Genotype=="BB"]
testResult <- t.test(data1,data2)
testResult
my.new.data<-my.data
my.new.data$Genotype<-"BB"
index.temp<-sample(1:50,n1)
my.new.data$Genotype[index.temp]<-"BA"
new.data1<-my.new.data$systolic.bp[my.new.data$Genotype=="BA"]
new.data2<-my.new.data$systolic.bp[my.new.data$Genotype=="BB"]
t.test(new.data1,new.data2)$statistic
